---
title: "Presentations"
---

Tentative schedule as of `r Sys.time()`.

## Background

This page documents how the presentation schedule can be automatically generated from the student survey.

## Download data

```{r}
googledrive::drive_auth(email = "rick.o.gilmore@gmail.com")
```

```{r}
if (!dir.exists('csv')) {
  dir.create('csv')
}

csv_fn <- "csv/psych-490-2024-fall-presentations.csv"

googledrive::drive_download(file = 'PSYCH 490.012 Fall 2024 Project Info (Responses)', path = csv_fn, type = 'csv', overwrite = TRUE)
```

```{r}
if (file.exists(csv_fn)) {
  presentations_df <- readr::read_csv(csv_fn, show_col_types = FALSE)
} else {
  message("File not found: ", csv_fn)
  presentations_df <- NULL
}
```

## Clean the data

```{r}
new_names <-
  c(
    "Timestamp",
    "Authors",
    "Title",
    "Format",
    "Give_talk",
    "Preferred_date"
  )

# Make new data frame with long and short names for reference
presentation_qs <- tibble::tibble(q_long = names(presentations_df), q_short = new_names)

# Swap out old (long) names for new (short) names
names(presentations_df) <- new_names
```

## Summary statistics

```{r}
presentations_df <- presentations_df |>
  dplyr::filter(!stringr::str_detect(Authors, "Gilmore"))

presentations_df |>
  dplyr::select(Give_talk, Format) |>
  dplyr::count(Format, Give_talk) |>
  kableExtra::kable(format = "html") |>
  kableExtra::kable_classic()
```

A total of *n*= `{r} dim(presentations_df)[1]` presenters have completed the survey as of `{r} Sys.time()`.

## Select subsets by preferred date

```{r}
fri_df <- presentations_df |>
  dplyr::filter(stringr::str_detect(Preferred_date, "Fri December 6"),
                Give_talk == "Yes")

mon_df <- presentations_df |>
  dplyr::filter(stringr::str_detect(Preferred_date, "Mon"),
                Give_talk == "Yes")

wed_df <- presentations_df |>
  dplyr::filter(stringr::str_detect(Preferred_date, "Wed"),
                Give_talk == "Yes")

no_pref <- presentations_df |>
  dplyr::filter(stringr::str_detect(Preferred_date, "No preference"),
                Give_talk == "Yes")

times <- c("04:40", "04:55", "05:10")
```

## Day 1: Friday, December 6, 2024

```{r}
#| label: tbl-fri-dec-06-2024
n_fri <- dim(fri_df)[1]
n_no_pref <- dim(no_pref)[1]

n_fri_slots_free <- length(times) - n_fri

new_fri_df <- rbind(fri_df, no_pref[1:n_fri_slots_free,])
new_fri_df$Time <- times

new_fri_df |>
  dplyr::filter(!is.na(Authors)) |>
  dplyr::arrange(Time) |>
  dplyr::select(Time, Authors, Title, Format) |>
  kableExtra::kable(format = 'html') |>
  kableExtra::kable_classic()
```

## Day 2: Monday, December 9, 2024

```{r}
#| label: tbl-mon-dec-09-2024
mon_df$Time <- times[1:dim(mon_df)[1]]

mon_df |>
  dplyr::filter(!is.na(Authors)) |>
  dplyr::arrange(Time) |>
  dplyr::select(Time, Authors, Title, Format) |>
  kableExtra::kable(format = 'html') |>
  kableExtra::kable_classic()
```

## Day 3: Wednesday, December 11, 2024

```{r}
#| label: tbl-wed-dec-11-2024
wed_df$Time <- times[1:dim(wed_df)[1]]

wed_df |>
  dplyr::filter(!is.na(Authors)) |>
  dplyr::arrange(Time) |>
  dplyr::select(Time, Authors, Title, Format) |>
  kableExtra::kable(format = 'html') |>
  kableExtra::kable_classic()
```
