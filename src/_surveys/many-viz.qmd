---
title: "Visualizing 'Many Analysts' data"
params:
  download_data: false
---

## Purpose {-}

This document generates some visualizations of the data described in [@Silberzahn2018-st].

```{r}
library(ggplot2)
library(dplyr)
```

## Gathering {-}

An OSF project hosts the data at: <https://osf.io/fv8c3>.
The parent OSF project is [@Silberzahn_2023_OSF].

Gilmore likes to make these workflows automated using specialized packages, so he downloaded the [`osfr` package](https://cran.r-project.org/package=osfr) from CRAN, see also [@Wolen-OSFF].

Since the file does not change often and has not changed recently, we set `eval = params$download_data` in this document's YAML header so that we *could* update the file in the future by rendering the document with `params$download_data` set to TRUE.

```{r}
if (params$download_data) {
  message("Re-downloading data from 'https://osf.io/fv8c3'.")
} else {
  message("`params$upload_data` is FALSE. Data not downloaded again.")
  message("The following chunk is shown for completeness, but is skipped here.")
}
```

```{r download-silberzahn-data, eval = params$download_data}
osf_silberzahn_node = "https://osf.io/fv8c3"

# Save file to temp directory
this_file <-
  osfr::osf_retrieve_file(basename(osf_silberzahn_node)) |>
  osfr::osf_download(path = tempdir(),
                     progress = TRUE,
                     conflicts = "overwrite")

# Extract to target directory
if (xfun::file_ext(this_file$name) == "zip") {
  utils::unzip(this_file$local_path,
               exdir = paste0(here::here(), "/src/surveys/csv"))
}
```

The data is saved as a CSV in `/src/surveys/csv/CrowdstormingDataJuly1st.csv`.

```{r}
red_cards <-
  readr::read_csv(
    paste0(
      here::here(),
      "/src/surveys/csv/CrowdstormingDataJuly1st.csv"
    ),
    show_col_types = FALSE
  )

str(red_cards)
```

## Exploration {-}

Let's see if we can understand more about the data.

Each row appears to include the number of yellow and red cards awarded to a given player by a given referee, presumably within the sample period of the study.

### Cards per specific player/ref {-}

```{r fig-n-yellow-cards-player-by-ref}
red_cards |>
  ggplot() +
  aes(x = yellowCards) +
  geom_histogram(fill = "yellow") +
  ggtitle("Distribution of yellow cards given specific player*ref interaction")
```

Most player by referee interactions resulted in no yellow cards at all, as expected.

```{r fig-n-red-cards-player-by-ref}
red_cards |>
  ggplot() +
  aes(redCards) +
  geom_histogram(fill = "red") +
  ggtitle("Distribution of red cards given specific player*ref interaction") +
  xlab("N red cards")
```

And there are relatively few red cards, too.

```{r}
n_red_cards <- red_cards |>
  dplyr::filter(redCards > 0)

xtabs(formula = ~ redCards, data = red_cards)
```

Specifically, there are $n=$ `r dim(n_red_cards)[1]` red cards, or $p=$ `r round(dim(n_red_cards)[1]/dim(red_cards)[1], 3)` of all player/referee interactions.
So, these are rare events in the database.
But there are some interactions with two red cards.

```{r}
n_red_cards |>
  dplyr::filter(redCards == 2) |>
  dplyr::select(playerShort, refNum) |>
  dplyr::arrange(refNum, playerShort) |>
  knitr::kable(format = 'html') |>
  kableExtra::kable_classic()
```

It doesn't look like there are three referees who gave two red cards out to more than one player, referees 432, 2822, and 2961.

```{r}
n_red_cards |>
  dplyr::filter(redCards == 2) |>
  dplyr::select(playerShort, refNum) |>
  dplyr::arrange(playerShort, refNum) |>
  knitr::kable(format = 'html') |>
  kableExtra::kable_classic()
```

And one player, cyril-jeunechamp, who got two red cards from different referees.

Just for fun, let's see how red and yellow cards relate to one another.
We add some jitter and use `alpha=.1` to make it easier to see any pattern.

```{r n-yellow-n-red-all-dyads}
#| fig.cap="Number of yellow and red cards for each player/referee pair in data from  [@Silberzahn_2023_OSF]"

red_cards |>
  ggplot() +
  aes(x = yellowCards, y = redCards) +
  geom_jitter(alpha = .1, width = .2, height = .2) +
  geom_smooth(method = "lm") +
  ggtitle("N yellow vs. N red cards for each player by referee combination") +
  xlab("N yellow cards") +
  ylab("N red cards")
```

### By player {-}

Let's group by player and see how the number of yellow and red cards appear as a function of player.

```{r}
by_player <- red_cards |>
  dplyr::group_by(playerShort) |>
  dplyr::summarise(n_refs = n(), n_yellow = sum(yellowCards), n_red = sum(redCards)) |>
  dplyr::mutate(p_yellow = n_yellow/n_refs, p_red = n_red/n_refs)
```

```{r}
by_player |>
  ggplot() +
  aes(x = n_refs) +
  geom_histogram() +
  ggtitle("Distribution of referee interactions for each player")
```

Now, let's look at these distributions.

```{r fig-p-yellow-cards-by-player-ref}
by_player |>
  ggplot() +
  aes(x = p_yellow) +
  geom_histogram(fill = "yellow") +
  ggtitle("Proportion of referee interactions with yellow cards")
```

```{r fig-p-red-cards-by-player-ref}
by_player |>
  ggplot() +
  aes(x = p_red) +
  geom_histogram(fill = "red") +
  ggtitle("Proportion of referee interactions with red cards")
```

So, there's something odd going on with `p_yellow`. This should be in [0,1]. 

```{r}
by_player |> dplyr::filter(p_yellow > 1)
```

Wait, a player can get more than one yellow card per referee interactdion. Doh!

Let's see if the yellow and red cards relate to one another.

```{r fig-p-yellow-cards-by-p-red-cards}
by_player |>
  ggplot() +
  aes(x = p_yellow, y = p_red) +
  geom_point() +
  geom_smooth() +
  ggtitle("Proportion of yellow vs. red cards for each player*referee")
```

### By player adding skin tone {-}

Let's try to visualize the ratings of skin tone along side this.

```{r}
by_player_skin <- red_cards |>
  dplyr::group_by(playerShort) |>
  dplyr::summarise(
    n_refs = n(),
    n_yellow = sum(yellowCards),
    n_red = sum(redCards),
    rater1 = mean(rater1),
    rater2 = mean(rater2)
  ) |>
  dplyr::mutate(p_yellow = n_yellow / n_refs, p_red = n_red / n_refs, skin = (rater1 + rater2)/2)
```

```{r fig-n-yellow-by-skin-tone}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = n_yellow, group = as.factor(skin)) +
  geom_violin() +
  geom_point(color = "yellow") +
  ggtitle("Distribution of player skin tone and number of yellow cards given")
```

```{r fig-n-yellow-by-skin-tone-scatter}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = n_yellow) +
  geom_point(color = "yellow") +
  geom_smooth(method = "lm") +
  ggtitle("Distribution of player skin tone and number of yellow cards given")
```

```{r fig-p-yellow-by-skin-tone}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = p_yellow, group = as.factor(skin)) +
  geom_violin() +
  geom_point(color = "yellow") +
  ggtitle("Distribution of player skin tone and proportion of yellow cards given")
```
```{r fig-p-yellow-by-skin-tone-scatter}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = p_yellow) +
  geom_point(color = "yellow") +
  geom_smooth(method = "lm") +
  ggtitle("Distribution of player skin tone and proportion of yellow cards given")
```

```{r fig-n-red-by-skin-tone}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = n_red, group = as.factor(skin)) +
  geom_violin() +
  geom_point(color = "red") +
  ggtitle("Distribution of player skin tone and number of red cards given")
```
```{r fig-n-red-by-skin-tone-scatter}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = n_red) +
  geom_point(color = "red") +
  geom_smooth(method = "lm") +
  ggtitle("Distribution of player skin tone and proportion of red cards given")
```


```{r fig-p-red-by-skin-tone}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = p_red, group = as.factor(skin)) +
  geom_violin() +
  geom_point(color = "red") +
  ggtitle("Distribution of skin tone and red cards given")
```

```{r fig-p-red-by-skin-tone-scatter}
by_player_skin |>
  ggplot() +
  aes(x = skin, y = p_red) +
  geom_point(color = "red") +
  geom_smooth(method = "lm") +
  ggtitle("Distribution of player skin tone and proportion of red cards given")
```

```{r fig-n-red-n-yellow-by-skin}
by_player_skin |>
  ggplot() +
  aes(x = n_yellow, y = n_red, group = 1) +
  geom_point(aes(size = as.factor(skin))) +
  geom_smooth() +
  ggtitle("Number yellow vs. (per ref encounter/game) red cards")
```

```{r fig-p-red-p-yellow-by-skin}
by_player_skin |>
  ggplot() +
  aes(x = p_yellow, y = p_red, group = 1) +
  geom_point(aes(size = as.factor(skin))) +
  geom_smooth() +
  ggtitle("Yellow vs. (per ref encounter/game) red cards")
```

#### Darker-skinned players

That's hard to read, so let's focus on players with `skin` > .5.

```{r fig-n-red-n-yellow-by-dark-skin}
by_player_skin |>
  dplyr::filter(skin > .5) |>
  ggplot() +
  aes(x = n_yellow, y = n_red) +
  geom_point(aes(size = as.factor(skin))) +
  geom_smooth() +
  ggtitle("Yellow vs. (per ref encounter/game) red cards for darker-skinned players")
```

```{r fig-p-red-p-yellow-by-dark-skin}
by_player_skin |>
  dplyr::filter(skin > .5) |>
  ggplot() +
  aes(x = p_yellow, y = p_red) +
  geom_point(aes(size = as.factor(skin))) +
  geom_smooth() +
  ggtitle("Yellow vs. (per ref encounter/game) red cards for darker-skinned players")
```
#### Lighter-skinned players

And for completeness, let's look at the lighter-skinned players.

```{r fig-n-red-n-yellow-by-light-skin}
by_player_skin |>
  dplyr::filter(skin <= .5) |>
  ggplot() +
  aes(x = n_yellow, y = n_red) +
  geom_point(aes(size = as.factor(skin))) +
  geom_smooth() +
  ggtitle("Yellow vs. red cards (per ref encounter/game) for lighter skinned players")
```

```{r fig-p-red-p-yellow-by-light-skin}
by_player_skin |>
  dplyr::filter(skin <= .5) |>
  ggplot() +
  aes(x = p_yellow, y = p_red) +
  geom_point() +
  geom_smooth() +
  ggtitle("Yellow vs. red cards (per ref encounter/game) for lighter skinned players")
```
### Referees

Now let's focus on the referees.

```{r}
by_ref <- red_cards |>
  dplyr::group_by(refNum) |>
  dplyr::summarise(n_interactions = n(),
    n_yellow = sum(yellowCards),
    n_red = sum(redCards)) |>
  dplyr::mutate(p_yellow = n_yellow / n_interactions, p_red = n_red / n_interactions)
```

```{r}
by_ref |>
  ggplot() +
  aes(x = n_interactions) +
  geom_histogram() +
  ggtitle("Player interactions per referee")
```

```{r fig-n-yellow-by-ref-player}
by_ref |>
  ggplot() +
  aes(x = n_yellow) +
  geom_histogram(fill = "yellow") +
  ggtitle("N yellow cards given by referees")
```

```{r fig-p-yellow-by-ref-player}
by_ref |>
  ggplot() +
  aes(x = p_yellow) +
  geom_histogram(fill = "yellow") +
  ggtitle("Yellow cards per player interaction given by referees")
```

```{r fig-n-red-by-ref-player}
by_ref |>
  ggplot() +
  aes(x = n_red) +
  geom_histogram(fill = "red")  +
  ggtitle("N red cards given by referees")
```

```{r fig-p-red-by-ref-player}
by_ref |>
  ggplot() +
  aes(x = p_red) +
  geom_histogram(fill = "red")  +
  ggtitle("Red cards per player interaction given by referees")
```
```{r fig-n-red-n-yellow-by-ref}
by_ref |>
  ggplot() +
  aes(x = n_yellow, y = n_red) +
  geom_point() +
  geom_smooth() +
  ggtitle("N yellow vs. red cards by referee*player interaction")
```

```{r fig-p-red-p-yellow-by-ref}
by_ref |>
  ggplot() +
  aes(x = p_yellow, y = p_red) +
  geom_point() +
  geom_smooth() +
  ggtitle("Proportion yellow vs. red cards by referee*player interaction")
```

